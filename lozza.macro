"use strict";

//{{{  macros

#define MULT2 1
#define MULT4 2
#define MULT8 3
#define MULT16 4
#define MULT32 5
#define MULT64 6
#define MULT128 7
#define MULT256 8

#define MAX_PLY 128
#define MAX_MOVES 128
#define MAX_MOVES_MULT 7

#define WHITE 0
#define BLACK 8

#define WHITE_INDEX 0
#define BLACK_INDEX 1

#define COLOUR_INDEX(color) ((color) >>> 3)

#define EMPTY 0
#define PAWN 1
#define KNIGHT 2
#define BISHOP 3
#define ROOK 4
#define QUEEN 5
#define KING 6

#define OBJECT(move) bdGrid[move & MOVE_TO_MASK]
#define PIECE(obj) ((obj) & 7)
#define COLOUR(obj) ((obj) & 8)
#define CAN_CAPTURE(obj)  (COLOUR(obj) != bdStm)

#define LIST_START(color) ((color) << 1)

#define WHITE_RIGHTS_KING  0x1
#define WHITE_RIGHTS_QUEEN 0x2
#define BLACK_RIGHTS_KING  0x4
#define BLACK_RIGHTS_QUEEN 0x8

#define WHITE_RIGHTS (WHITE_RIGHTS_KING  | WHITE_RIGHTS_QUEEN)
#define BLACK_RIGHTS (BLACK_RIGHTS_QUEEN | BLACK_RIGHTS_KING)

#define MOVE_FROM_SHIFT 6
#define MOVE_TO_MASK 0x3F
#define MOVE_PROMOTE_BIT 0x1000

//}}}
//{{{  prng
//
// https://en.wikipedia.org/wiki/Mersenne_Twister
//

let twisterList  = new Uint32Array(624);
let twisterIndex = 0;

function twisterInit(seed) {

  const mt = twisterList;

  mt[0] = seed >>> 0;

  for (let i = 1; i < 624; i++) {
    mt[i] = (0x6C078965 * (mt[i - 1] ^ (mt[i - 1] >>> 30)) + i) >>> 0;
  }
}

function twisterFill() {

  const mt = twisterList;

  for (let i = 0; i < 624; i++) {
    let y = (mt[i] & 0x80000000) + (mt[(i + 1) % 624] & 0x7FFFFFFF);
    mt[i] = mt[(i + 397) % 624] ^ (y >>> 1);
    if (y % 2 !== 0) {
      mt[i] ^= 0x9908B0DF;
    }
  }
}

function twisterRand() {

  const mt = twisterList;

  if (twisterIndex === 0)
    twisterFill();

  let y = mt[twisterIndex];
  y ^= y >>> 11;
  y ^= (y << 7)  & 0x9D2C5680;
  y ^= (y << 15) & 0xEFC60000;
  y ^= y >>> 18;

  twisterIndex = (twisterIndex + 1) % 624;

  return y >>> 0;
}

function twisterHash() {

  let r1 = twisterRand() >>> 0;
  let r2 = twisterRand() >>> 0;
  let r3 = twisterRand() >>> 0;
  let r4 = twisterRand() >>> 0;

  let hash = (r1 ^ (r2 << 11) ^ (r3 >>> 17) ^ (r4 << 5)) >>> 0;

  return hash >>> 0;
}

twisterInit(0x9E3779B9);

//}}}
//{{{  board

//{{{  constants

const maskRights = new Int32Array([
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, ~8, 15, 15, 15, ~12,15, 15, ~4, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, ~2, 15, 15, 15, ~3, 15, 15, ~1, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15
]);

//}}}

let bdList   = new Int32Array(32)
let bdCount  = new Int32Array(2)
let bdGrid   = new Int32Array(64);
let bdStm    = WHITE;
let bdRights = 0;
let bdEp     = 0;
let bdPly    = 0;

//{{{  printBoard

const itoaPiece = {
  0: '.',
  1: 'P', 2:  'N', 3:  'B', 4:  'R', 5:  'Q', 6:  'K',
  9: 'p', 10: 'n', 11: 'b', 12: 'r', 13: 'q', 14: 'k'
};

function printBoard () {

  let r = '';
  for (let sq=0; sq < 64; sq++) {
    const s = sq ^ 56;
    r += itoaPiece[bdGrid[s]];
    if (sq && !((sq+1) % 8)) {
      console.log(r);
      r = '';
    }
  }

  console.log('w/b counts', bdCount.toString());

  const wl = bdList.slice(0,  16);
  const bl = bdList.slice(16, 32);

  console.log('w list', wl.toString());
  console.log('b list', bl.toString());

}

//}}}
//{{{  position

const atoiPiece = {
  'P': 1, 'N': 2,  'B': 3,  'R': 4,  'Q': 5,  'K': 6,
  'p': 9, 'n': 10, 'b': 11, 'r': 12, 'q': 13, 'k': 14,
  '1': -1, '2': -2, '3': -3, '4': -4, '5': -5, '6': -6, '7': -7, '8': -8
};

const atoiIndex = {
  'P': 0, 'N': 0, 'B': 0, 'R': 0, 'Q': 0, 'K': 0,
  'p': 1, 'n': 1, 'b': 1, 'r': 1, 'q': 1, 'k': 1,
};

function position(board, stm, rights, ep) {

  bdGrid.fill(0);
  bdList.fill(0);
  bdCount.fill(1);

  let sq = 0;

  for (let i=0; i < board.length; i++) {
    const ch = board[i];
    if (ch == '/')
      continue;
    const p = atoiPiece[ch];
    if (p < 0)
      sq -= p;
    else {
      const index = atoiIndex[ch];
      if (p == 6 || p == 14) {
        const s = sq ^ 56;
        const j = index << MULT16;
        bdList[j] = s;
        bdGrid[s] = p;
      }
      else {
        const s = sq ^ 56;
        const j = (index << MULT16) + bdCount[index];
        bdList[j] = s;
        bdGrid[s] = p;
        bdCount[index] = bdCount[index] + 1;
      }
      sq++;
    }
  }

}

//}}}

//}}}

//{{{  genMoves

#define PAWN_OFFSET(colour) (8 - ((colour) >> 2))

const captureList  = new Int32Array(MAX_PLY * MAX_MOVES);
const slideList    = new Int32Array(MAX_PLY * MAX_MOVES);
const captureCount = new Int32Array(MAX_PLY);
const slideCount   = new Int32Array(MAX_PLY);

function genMoves () {

  const origin   = bdPly << MAX_MOVES_MULT;
  const cx       = COLOUR_INDEX(bdStm);
  const pawnBase = cx << MULT256;

  let offsetSlide   = origin;
  let offsetCapture = origin;

  let count = bdCount[cx];
  let start = LIST_START(bdStm);

  while (count) {

    const sq = bdList[start++];

    if (sq < 0)
      continue;

    count--;

    const piece = PIECE(bdGrid[sq]);

    switch (piece) {
      //{{{  pawn
      
      case PAWN: {
      
        const base = pawnBase + (sq << MULT4);
      
        let move = pawnMoveList[base+0];
        if (move && !OBJECT(move)) {
          slideList[offsetSlide++] = move;
          move = pawnMoveList[base+1];
          if (move && !OBJECT(move))
            slideList[offsetSlide++] = move;
        }
      
        move = pawnMoveList[base+2];
        let obj = OBJECT(move);
        if (move && obj && CAN_CAPTURE(obj))
          captureList[offsetCapture++] = move;
      
        move = pawnMoveList[base+3];
        obj = OBJECT(move);
        if (move && obj && CAN_CAPTURE(obj))
          captureList[offsetCapture++] = move;
      
        break;
      
      }
      
      //}}}
      //{{{  knight
      
      case KNIGHT: {
      
        let base = sq << MULT16;
        let move = knightMoveList[base];
      
        while (move) {
          const obj = OBJECT(move);
          if (!obj)
            slideList[offsetSlide++] = move;
          else if (CAN_CAPTURE(obj))
            captureList[offsetCapture++] = move;
          move = knightMoveList[++base];
        }
      
        break;
      
      }
      
      //}}}
      //{{{  bishop
      
      #define BRQ_MOVES(list) \
        base = sq << MULT8; \
        move = list[base]; \
        while (move) { \
          const obj = OBJECT(move); \
          if (!obj) \
            slideList[offsetSlide++] = move; \
          else { \
            if (CAN_CAPTURE(obj)) \
              captureList[offsetCapture++] = move; \
            break; \
          } \
          move = list[++base]; \
        }
      
      case BISHOP: {
      
        let base = 0;
        let move = 0;
      
        BRQ_MOVES(bishopMoveListNE);
        BRQ_MOVES(bishopMoveListSE);
        BRQ_MOVES(bishopMoveListSW);
        BRQ_MOVES(bishopMoveListNW);
      
        break;
      
      }
      
      //}}}
      //{{{  rook
      
      case ROOK: {
      
        let base = 0;
        let move = 0;
      
        BRQ_MOVES(rookMoveListN);
        BRQ_MOVES(rookMoveListE);
        BRQ_MOVES(rookMoveListS);
        BRQ_MOVES(rookMoveListW);
      
        break;
      
      }
      
      //}}}
      //{{{  queen
      
      case QUEEN: {
      
        let base = 0;
        let move = 0;
      
        BRQ_MOVES(rookMoveListN);
        BRQ_MOVES(rookMoveListE);
        BRQ_MOVES(rookMoveListS);
        BRQ_MOVES(rookMoveListW);
      
        BRQ_MOVES(bishopMoveListNE);
        BRQ_MOVES(bishopMoveListSE);
        BRQ_MOVES(bishopMoveListSW);
        BRQ_MOVES(bishopMoveListNW);
      
        break;
      
      }
      
      //}}}
      //{{{  king
      
      case KING: {
      
        let base = sq << MULT16;
        let move = kingMoveList[base];
      
        while (move) {
          const obj = OBJECT(move);
          if (!obj)
            slideList[offsetSlide++] = move;
          else if (CAN_CAPTURE(obj))
            captureList[offsetCapture++] = move;
          move = kingMoveList[++base];
        }
      
        break;
      
      }
      
      //}}}
    }
  }

  slideCount[bdPly]   = offsetSlide   - origin;
  captureCount[bdPly] = offsetCapture - origin;
}

//}}}
//{{{  move lists

//{{{  initPawnMoveList

const pawnMoveList = new Int32Array(2*64*4);

function initPawnMoveList() {

  const m = pawnMoveList;

  for (let from=0; from < 64; from++) {

    let base = from * 4;

    const file = from % 8;
    const rank = Math.floor(from / 8);

    const promoteBit = (rank == 6) ? MOVE_PROMOTE_BIT : 0;
    const move = (from << MOVE_FROM_SHIFT) | promoteBit;

    if (rank < 7)
      m[base++] = move | (from + 8);
    if (rank === 1)
      m[base++] = move | (from + 16);
    if (rank < 7 && file < 7)
      m[base++] = move | (from + 9);
    if (rank < 7 && file > 0)
      m[base++] = move | (from + 7);

  }

  for (let from=0; from < 64; from++) {

    let base = from * 4 + 64 * 4;

    const file = from % 8;
    const rank = Math.floor(from / 8);

    const promoteBit = (rank == 1) ? MOVE_PROMOTE_BIT : 0;
    const move = (from << MOVE_FROM_SHIFT) | promoteBit;

    if (rank > 0)
      m[base++] = move | (from - 8);
    if (rank === 6)
      m[base++] = move | (from - 16);
    if (rank > 0 && file < 7)
      m[base++] = move | (from - 7);
    if (rank > 0 && file > 0)
      m[base++] = move | (from - 9);

  }

}

//}}}
//{{{  initKnightMoveList

const knightMoveList = new Int32Array(64*16);

function initKnightMoveList() {

  const m = knightMoveList;

  for (let from=0; from < 64; from++) {

    let base = from * 16;

    const file = from % 8;
    const rank = Math.floor(from / 8);

    const move = from << MOVE_FROM_SHIFT;

    if (rank < 6 && file > 0)
      m[base++] = move | (from + 15);

    if (rank < 6 && file < 7)
      m[base++] = move | (from + 17);

    if (rank < 7 && file > 1)
      m[base++] = move | (from + 6);

    if (rank < 7 && file < 6)
      m[base++] = move | (from + 10);

    if (rank > 1 && file > 0)
      m[base++] = move | (from - 17);

    if (rank > 1 && file < 7)
      m[base++] = move | (from - 15);

    if (rank > 0 && file > 1)
      m[base++] = move | (from - 10);

    if (rank > 0 && file < 6)
      m[base++] = move | (from - 6);

  }
}

//}}}
//{{{  initBishopMoveList*

const bishopMoveListNE = new Int32Array(64*8);
const bishopMoveListSE = new Int32Array(64*8);
const bishopMoveListSW = new Int32Array(64*8);
const bishopMoveListNW = new Int32Array(64*8);

function initBishopMoveListNE() {

  const m = bishopMoveListNE;

  for (let from = 0; from < 64; from++) {

    let base = from * 8;
    let to   = from;

    const file = from % 8;
    const rank = Math.floor(from / 8);
    const move = from << MOVE_FROM_SHIFT;
    const dist = Math.min(7-rank, 7-file);

    for (let i = 0; i < dist; i++) {
      to += 9;
      m[base++] = move | to;
    }
  }
}

function initBishopMoveListSE() {

  const m = bishopMoveListSE;

  for (let from = 0; from < 64; from++) {

    let base = from * 8;
    let to   = from;

    const file = from % 8;
    const rank = Math.floor(from / 8);
    const move = from << MOVE_FROM_SHIFT;
    const dist = Math.min(rank, 7-file);

    for (let i = 0; i < dist; i++) {
      to -= 7;
      m[base++] = move | to;
    }
  }
}

function initBishopMoveListSW() {

  const m = bishopMoveListSW;

  for (let from = 0; from < 64; from++) {

    let base = from * 8;
    let to   = from;

    const file = from % 8;
    const rank = Math.floor(from / 8);
    const move = from << MOVE_FROM_SHIFT;
    const dist = Math.min(rank, file);

    for (let i = 0; i < dist; i++) {
      to -= 9;
      m[base++] = move | to;
    }
  }
}

function initBishopMoveListNW() {

  const m = bishopMoveListNW;

  for (let from = 0; from < 64; from++) {

    let base = from * 8;
    let to   = from;

    const file = from % 8;
    const rank = Math.floor(from / 8);
    const move = from << MOVE_FROM_SHIFT;
    const dist = Math.min(7-rank, file);

    for (let i = 0; i < dist; i++) {
      to += 7;
      m[base++] = move | to;
    }
  }
}

//}}}
//{{{  initRookMoveList*

const rookMoveListN = new Int32Array(64*8);
const rookMoveListE = new Int32Array(64*8);
const rookMoveListS = new Int32Array(64*8);
const rookMoveListW = new Int32Array(64*8);

function initRookMoveListN() {

  const m = rookMoveListN;

  for (let from=0; from < 64; from++) {

    let base = from * 8;
    let to   = from;

    const rank = Math.floor(from / 8);
    const move = from << MOVE_FROM_SHIFT;
    const dist = 7 - rank;

    for (let i=0; i < dist; i++) {
      to += 8;
      m[base++] = move | to;
    }
  }
}

function initRookMoveListE() {

  const m = rookMoveListE;

  for (let from = 0; from < 64; from++) {

    let base = from * 8;
    let to = from;

    const file = from % 8;
    const move = from << MOVE_FROM_SHIFT;
    const dist = 7 - file;

    for (let i = 0; i < dist; i++) {
      to += 1;
      m[base++] = move | to;
    }
  }
}

function initRookMoveListS() {

  const m = rookMoveListS;

  for (let from = 0; from < 64; from++) {

    let base = from * 8;
    let to = from;

    const rank = Math.floor(from / 8);
    const move = from << MOVE_FROM_SHIFT;
    const dist = rank;

    for (let i = 0; i < dist; i++) {
      to -= 8;
      m[base++] = move | to;
    }
  }
}

function initRookMoveListW() {

  const m = rookMoveListW;

  for (let from = 0; from < 64; from++) {

    let base = from * 8;
    let to = from;

    const file = from % 8;
    const move = from << MOVE_FROM_SHIFT;
    const dist = file;

    for (let i = 0; i < dist; i++) {
      to -= 1;
      m[base++] = move | to;
    }
  }
}

//}}}
//{{{  initKingMoveList

const kingMoveList = new Int32Array(64*16);

function initKingMoveList() {

  const m = kingMoveList;

  for (let from=0; from < 64; from++) {

    let base = from * 16;

    const file = from % 8;
    const rank = Math.floor(from / 8);

    const move = from << MOVE_FROM_SHIFT;

    if (rank < 7)
      m[base++] = move | (from + 8);

    if (rank > 0)
      m[base++] = move | (from - 8);

    if (file < 7)
      m[base++] = move | (from + 1);

    if (file > 0)
      m[base++] = move | (from - 1);

    if (rank < 7 && file < 7)
      m[base++] = move | (from + 9);

    if (rank > 0 && file > 0)
      m[base++] = move | (from - 9);

    if (rank < 7 && file > 0)
      m[base++] = move | (from + 7);

    if (rank > 0 && file < 7)
      m[base++] = move | (from - 7);

  }
}


//}}}

//}}}
//{{{  uciExec

function uciExec(command) {

  const args = command.split(' ');

  switch (args[0]) {

    //{{{  isready
    
    case 'isready':
    
      console.log('readyok');
    
      break;
    
    //}}}
    //{{{  position
    
    case 'position':
    case 'p':
    
      if (args[1] == 'startpos' || args[1] == 's')
        position('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR', 'w', 'KQkq', '-');
      else
        position(args[2], args[3], args[4], args[5]);
    
      break;
    
    //}}}
    //{{{  ucinewgame
    
    case 'usenewgame':
    case 'u':
    
      break;
    
    //}}}
    //{{{  board
    
    case 'board':
    case 'b':
    
      printBoard();
    
      break;
    
    //}}}
    //{{{  moves
    
    case 'moves':
    case 'm':
    
      bdPly = 0;
    
      genMoves();
    
      console.log('c', captureCount[0], 's', slideCount[0]);
    
      for (let i=0; i < captureCount[0]; i++) {
        const move = captureList[i];
        console.log('c',(move >> 6) & 0x3F, move & 0x3F);
      }
    
      for (let i=0; i < slideCount[0]; i++) {
        const move = slideList[i];
        console.log('s',(move >> 6) & MOVE_TO_MASK, move & MOVE_TO_MASK);
      }
    
      break;
    
    //}}}
    //{{{  q
    
    case 'q':
    
      process.exit();
    
    //}}}

    default:
      console.log('?');
  }

}

//}}}
//{{{  initOnce

function initOnce () {

  const t1 = performance.now();

  initPawnMoveList();

  initKnightMoveList()

  initBishopMoveListNE();
  initBishopMoveListSE();
  initBishopMoveListSW();
  initBishopMoveListNW();

  initRookMoveListN()
  initRookMoveListE()
  initRookMoveListS()
  initRookMoveListW()

  initKingMoveList()

  const t2 = performance.now();
  const d = t2 - t1;

  console.log('initOnce',d,'ms');

}

//}}}

initOnce();

//{{{  read/write stdin/stdout

const readline = require("readline");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

rl.on("line", (line) => {
  uciExec(line.trim());
});

//}}}

